package com.tinychat.controller.commands.mappings
{
    import com.tinychat.controller.commands.ban.*;
    import com.tinychat.controller.commands.broadcast.*;
    import com.tinychat.controller.commands.broadcast.media.send.*;
    import com.tinychat.controller.commands.broadcast.media.youtube.*;
    import com.tinychat.controller.commands.broadcast.signals.*;
    import com.tinychat.controller.commands.chat.*;
    import com.tinychat.controller.commands.chat.signals.*;
    import com.tinychat.controller.commands.document.*;
    import com.tinychat.controller.commands.document.signals.*;
    import com.tinychat.controller.commands.fullscreen.*;
    import com.tinychat.controller.commands.fullscreen.signals.*;
    import com.tinychat.controller.commands.gifts.*;
    import com.tinychat.controller.commands.gifts.signals.*;
    import com.tinychat.controller.commands.greenroom.*;
    import com.tinychat.controller.commands.greenroom.signal.*;
    import com.tinychat.controller.commands.invite.twitter.*;
    import com.tinychat.controller.commands.invite.twitter.signals.*;
    import com.tinychat.controller.commands.login.*;
    import com.tinychat.controller.commands.login.signals.*;
    import com.tinychat.controller.commands.menuoption.*;
    import com.tinychat.controller.commands.menuoption.signal.*;
    import com.tinychat.controller.commands.popup.signals.*;
    import com.tinychat.controller.commands.room.*;
    import com.tinychat.controller.commands.room.connection.*;
    import com.tinychat.controller.commands.room.connection.callbacks.*;
    import com.tinychat.controller.commands.room.signals.*;
    import com.tinychat.controller.commands.settings.*;
    import com.tinychat.controller.commands.settings.signals.*;
    import com.tinychat.controller.commands.snapshot.*;
    import com.tinychat.controller.commands.snapshot.signals.*;
    import com.tinychat.controller.commands.social.network.facebook.*;
    import com.tinychat.controller.commands.social.network.facebook.signals.*;
    import com.tinychat.controller.commands.social.network.mqtt.*;
    import com.tinychat.controller.commands.social.network.mqtt.signals.*;
    import com.tinychat.controller.commands.social.network.tumblr.*;
    import com.tinychat.controller.commands.social.network.tumblr.signals.*;
    import com.tinychat.controller.commands.social.network.twitter.*;
    import com.tinychat.controller.commands.social.network.twitter.signals.*;
    import com.tinychat.controller.commands.startup.*;
    import com.tinychat.controller.commands.startup.signals.*;
    import com.tinychat.controller.commands.trial.*;
    import com.tinychat.controller.commands.trial.signals.*;
    import com.tinychat.controller.commands.user.*;
    import com.tinychat.controller.commands.user.actions.*;
    import com.tinychat.controller.commands.user.signals.*;
    import com.tinychat.controller.commands.userinfo.*;
    import com.tinychat.controller.commands.userinfo.signals.*;
    import com.tinychat.controller.commands.utils.*;
    import com.tinychat.controller.guards.*;
    import com.tinychat.controller.guards.chat.*;
    import com.tinychat.controller.guards.greenroom.*;
    import com.tinychat.controller.guards.youtube.*;
    import com.tinychat.model.gifts.*;
    import com.tinychat.model.guards.*;
    import com.tinychat.model.guards.media.*;
    import com.tinychat.model.guards.mode.*;
    import com.tinychat.model.invite.facebook.*;
    import com.tinychat.model.parsers.fromowner.*;
    import com.tinychat.model.parsers.privatemessage.*;
    import com.tinychat.model.room.*;
    import com.tinychat.model.room.connection.*;
    import com.tinychat.model.room.connection.calls.signals.*;
    import com.tinychat.model.social.chat.*;
    import com.tinychat.model.social.chat.links.*;
    import com.tinychat.model.social.chat.message.factory.*;
    import com.tinychat.model.user.*;
    import com.tinychat.services.*;
    import com.tinychat.services.chat.facebook.*;
    import com.tinychat.services.chat.links.*;
    import com.tinychat.services.chat.mqtt.*;
    import com.tinychat.services.chat.tinychat.*;
    import com.tinychat.services.connection.*;
    import com.tinychat.services.login.*;
    import com.tinychat.services.oauth.*;
    import com.tinychat.services.report.*;
    import com.tinychat.services.room.*;
    import com.tinychat.services.snapshot.*;
    import com.tinychat.services.social.network.facebook.*;
    import com.tinychat.services.social.network.facebook.og.*;
    import com.tinychat.services.social.network.facebook.share.*;
    import com.tinychat.services.social.network.mqtt.*;
    import com.tinychat.services.social.network.tumblr.*;
    import com.tinychat.services.social.network.twitter.*;
    import com.tinychat.services.userinfo.*;
    import com.tinychat.services.youtube.*;
    import com.tinychat.ui.components.alerts.*;
    import com.tinychat.ui.components.application.*;
    import com.tinychat.ui.components.broadcast.containers.*;
    import com.tinychat.ui.components.broadcast.lists.*;
    import com.tinychat.ui.components.broadcast.screens.*;
    import com.tinychat.ui.components.broadcast.selectors.*;
    import com.tinychat.ui.components.connection.*;
    import com.tinychat.ui.components.controlbar.buttons.*;
    import com.tinychat.ui.components.fullscreen.*;
    import com.tinychat.ui.components.gifts.*;
    import com.tinychat.ui.components.invite.*;
    import com.tinychat.ui.components.login.*;
    import com.tinychat.ui.components.login.facebook.*;
    import com.tinychat.ui.components.login.tumblr.*;
    import com.tinychat.ui.components.login.twitter.*;
    import com.tinychat.ui.components.moderator.*;
    import com.tinychat.ui.components.password.*;
    import com.tinychat.ui.components.preloader.*;
    import com.tinychat.ui.components.pro.*;
    import com.tinychat.ui.components.settings.*;
    import com.tinychat.ui.components.snapshot.*;
    import com.tinychat.ui.components.social.buttonbar.*;
    import com.tinychat.ui.components.social.chat.*;
    import com.tinychat.ui.components.social.chat.list.*;
    import com.tinychat.ui.components.social.userlist.*;
    import com.tinychat.ui.components.social.userlist.greenroom.*;
    import com.tinychat.ui.components.spark.*;
    import com.tinychat.ui.components.trial.*;
    import com.tinychat.ui.components.userinfo.*;
    import com.tinychat.ui.components.youtube.*;
    import com.tinychat.ui.context.popupmenu.*;
    import com.tinychat.ui.mediators.*;
    import com.tinychat.ui.mediators.alerts.*;
    import com.tinychat.ui.mediators.application.*;
    import com.tinychat.ui.mediators.broadcast.containers.*;
    import com.tinychat.ui.mediators.broadcast.lists.*;
    import com.tinychat.ui.mediators.broadcast.screens.*;
    import com.tinychat.ui.mediators.broadcast.selectors.*;
    import com.tinychat.ui.mediators.connection.*;
    import com.tinychat.ui.mediators.controlbar.buttons.*;
    import com.tinychat.ui.mediators.fullscreen.*;
    import com.tinychat.ui.mediators.gift.*;
    import com.tinychat.ui.mediators.invite.*;
    import com.tinychat.ui.mediators.login.*;
    import com.tinychat.ui.mediators.login.facebook.*;
    import com.tinychat.ui.mediators.login.tumblr.*;
    import com.tinychat.ui.mediators.login.twitter.*;
    import com.tinychat.ui.mediators.moderator.*;
    import com.tinychat.ui.mediators.password.*;
    import com.tinychat.ui.mediators.popups.*;
    import com.tinychat.ui.mediators.pro.*;
    import com.tinychat.ui.mediators.settings.*;
    import com.tinychat.ui.mediators.snapshot.*;
    import com.tinychat.ui.mediators.social.buttonbar.*;
    import com.tinychat.ui.mediators.social.buttonbar.signals.*;
    import com.tinychat.ui.mediators.social.chat.*;
    import com.tinychat.ui.mediators.social.userslist.*;
    import com.tinychat.ui.mediators.social.userslist.greenroom.*;
    import com.tinychat.ui.mediators.trial.*;
    import com.tinychat.ui.mediators.userinfo.*;
    import com.tinychat.ui.mediators.youtube.*;
    import mx.core.*;

    public class CoreMappingCommand extends MappingCommand
    {

        public function CoreMappingCommand()
        {
            return;
        }// end function

        override public function execute() : void
        {
            injector.mapClass(BroadcastAuthenticationService, BroadcastAuthenticationService);
            injector.mapClass(BroadcastModeService, BroadcastModeService);
            injector.mapClass(LinkValidationService, LinkValidationService);
            injector.mapClass(MqttHashService, MqttHashService);
            injector.mapClass(RoomInfoService, RoomInfoService);
            injector.mapClass(RoomRestrictionService, RoomRestrictionService);
            injector.mapClass(RoomServiceProxy, RoomServiceProxy);
            injector.mapClass(TinychatUserinfoService, TinychatUserinfoService);
            injector.mapValue(String, ServiceApiUrl.FIND_ROOM, "RoomInfoServiceUrl");
            injector.mapValue(String, ServiceApiUrl.ROOM_SETUP, "RoomRestrictionServiceUrl");
            injector.mapValue(String, ServiceApiUrl.ROOM_SETUP, "BroadcastModeServiceUrl");
            injector.mapValue(String, ServiceApiUrl.BROADCAST_TOKEN, "BroadcastAuthenticationServiceUrl");
            injector.mapValue(String, ServiceApiUrl.MQTT_HASH, "MqttHashServiceUrl");
            injector.mapValue(String, ServiceApiUrl.USERINFO, "TinychatUserinfoServiceUrl");
            injector.mapValue(String, ServiceApiUrl.LINK_VALIDATION, "LinkValidationServiceUrl");
            injector.mapSingleton(NickLoggingService);
            injector.mapSingleton(BroadcastScreenshotService);
            injector.mapSingleton(OAuthLoginService);
            injector.mapSingleton(UploadSnapshotService);
            injector.mapSingleton(AutoOpVerificationService);
            injector.mapSingleton(PromotedVerificationService);
            injector.mapSingleton(ConnectionFailureLogService);
            injector.mapSingleton(ChatCaptchaService);
            injector.mapSingleton(ChatTicketService);
            injector.mapSingleton(RoomCaptchaService);
            injector.mapSingleton(FacebookLoginService);
            injector.mapSingleton(FacebookUserInfoService);
            injector.mapSingleton(FacebookFriendsInfoService);
            injector.mapClass(FacebookGetPermissionsService, FacebookGetPermissionsService);
            injector.mapSingletonOf(FacebookPostInviteStatusService, FacebookApiPostInviteStatusService);
            injector.mapSingletonOf(FacebookSendInviteStatusService, FacebookUiSendInviteStatusService);
            injector.mapSingletonOf(FacebookPromptInviteStatusService, FacebookSharerPromptInviteStatusService);
            injector.mapSingletonOf(FacebookPostSnapshotService, FacebookApiPostSnapshotService);
            injector.mapSingletonOf(FacebookPromptSnapshotService, FacebookSharerPostSnapshotService);
            injector.mapSingleton(FacebookChatInviteSender);
            injector.mapClass(OpenGraphActionService, OpenGraphActionService);
            injector.mapClass(OpenGraphUpdateService, OpenGraphUpdateService);
            injector.mapClass(OpenGraphDeleteService, OpenGraphDeleteService);
            injector.mapValue(TwitterInfoService, new TwitterInfoService(ServiceApiUrl.TWITTER_INFO));
            injector.mapValue(TwitterDirectMessageService, new TwitterDirectMessageService(ServiceApiUrl.TWITTER_DM));
            injector.mapValue(TwitterPostTweetService, new TwitterPostTweetService(ServiceApiUrl.OAUTHMESSAGE));
            injector.mapValue(TwitterFollowService, new TwitterFollowService(ServiceApiUrl.OAUTHMESSAGE));
            injector.mapSingleton(TwitterPostSnapshotService);
            injector.mapValue(TumblrReblogService, new TumblrReblogService(ServiceApiUrl.OAUTHMESSAGE));
            injector.mapSingleton(TinychatPublicChatService);
            injector.mapSingleton(TinychatPublicUserNoticeService);
            injector.mapSingleton(TinychatPublicGiftNoticeService);
            injector.mapSingleton(TinychatPublicActionNoticeService);
            injector.mapSingleton(TinychatPublicMediaNoticeService);
            injector.mapSingleton(TinychatPrivateChatService);
            injector.mapSingleton(TinychatPrivateNoticeService);
            injector.mapSingleton(TinychatCurrentUserChatMessageFactory);
            injector.mapSingleton(FacebookPresenceService);
            injector.mapSingleton(FacebookChatService);
            injector.mapSingleton(FacebookNoticeService);
            injector.mapSingleton(FacebookCurrentUserChatMessageFactory);
            injector.mapSingleton(MqttChatService);
            injector.mapSingleton(MqttNoticeService);
            injector.mapSingleton(MqttCurrentUserChatMessageFactory);
            injector.mapSingleton(LinkWhitelist);
            injector.mapSingleton(LinkBlacklist);
            injector.mapValue(YouTubeFeedService, new YouTubeFeedService(YouTubeServiceUrl.VIDEOS, "Most popular today:"), "YouTubeMostPopularToday");
            injector.mapValue(YouTubeSearchService, new YouTubeSearchService(YouTubeServiceUrl.SEARCH, "Results for \'{0}\'"));
            injector.mapValue(YouTubeClipService, new YouTubeClipService(YouTubeServiceUrl.VIDEOS));
            injector.mapValue(TinychatApplication, TinychatApplication(FlexGlobals.topLevelApplication));
            mediatorMap.mapView(TinychatApplication(FlexGlobals.topLevelApplication), TinychatApplicationMediator);
            mediatorMap.mapView(ApplicationScreen, ApplicationScreenMediator);
            injector.mapSingleton(OpenPopup);
            injector.mapSingleton(ClosePopup);
            injector.mapSingleton(CloseableModalPopup);
            mediatorMap.mapView(ConnectionLostScreen, ConnectionLostScreenMediator, ConnectionRetryScreenBase);
            mediatorMap.mapView(ConnectionFailedScreen, ConnectionFailedScreenMediator, ConnectionRetryScreenBase);
            mediatorMap.mapView(LoginSelectorScreen, LoginSelectorScreenMediator);
            mediatorMap.mapView(FacebookButton, FacebookButtonMediator);
            mediatorMap.mapView(FacebookLoginScreen, FacebookLoginScreenMediator);
            mediatorMap.mapView(TumblrButton, TumblrButtonMediator);
            mediatorMap.mapView(TumblrLoginScreen, TumblrLoginScreenMediator);
            mediatorMap.mapView(TumblrLoginSuccessScreen, TumblrLoginSuccessScreenMediator);
            mediatorMap.mapView(TwitterButton, TwitterButtonMediator);
            mediatorMap.mapView(TwitterLoginScreen, TwitterLoginScreenMediator);
            mediatorMap.mapView(TwitterLoginSuccessScreen, TwitterLoginSuccessScreenMediator);
            mediatorMap.mapView(RoomPasswordPrompt, RoomPasswordPromptMediator);
            mediatorMap.mapView(NicknameSelector, NicknameSelectorMediator);
            mediatorMap.mapView(BannedScreen, BannedScreenMediator);
            mediatorMap.mapView(BroadcastBlockedScreen, BroadcastBlockedScreenMediator);
            mediatorMap.mapView(RoomClosedScreen, RoomClosedScreenMediator);
            mediatorMap.mapView(LinkWarningScreen, LinkWarningScreenMediator);
            mediatorMap.mapView(LinkBlockedScreen, LinkBlockedScreenMediator);
            mediatorMap.mapView(LimitedFeatureScreen, LimitedFeatureScreenMediator);
            mediatorMap.mapView(LimitedVideoFeatureScreen, LimitedVideoFeatureScreenMediator);
            mediatorMap.mapView(ApplicationSettingsScreen, ApplicationSettingsScreenMediator);
            mediatorMap.mapView(TopicSelectionScreen, TopicSelectionScreenMediator);
            mediatorMap.mapView(BanListScreen, BanListScreenMediator);
            mediatorMap.mapView(ConfirmBanScreen, ConfirmBanScreenMediator, ConfirmScreen);
            mediatorMap.mapView(ConfirmReportUserScreen, ConfirmReportBroadcastScreenMediator, ConfirmScreen);
            mediatorMap.mapView(ConfirmFollowScreen, ConfirmFollowScreenMediator, ConfirmScreen);
            mediatorMap.mapView(ReportFollowScreen, ReportFollowScreenMediator);
            mediatorMap.mapView(PublicChatView, PublicChatViewMediator);
            mediatorMap.mapView(PrivateChatView, PrivateChatViewMediator);
            mediatorMap.mapView(PlaySoundsCheckbox, PlaySoundsCheckboxMediator);
            mediatorMap.mapView(ReceiveNoticesCheckbox, ReceiveNoticesCheckboxMediator);
            mediatorMap.mapView(SocialButtonBar, SocialButtonBarMediator);
            mediatorMap.mapView(UsersListButtonBarButton, UsersListButtonBarButtonMediator);
            mediatorMap.mapView(PublicChatListButtonBarButton, PublicChatListButtonBarButtonMediator);
            mediatorMap.mapView(PrivateChatListButtonBarButton, PrivateChatListButtonBarButtonMediator);
            mediatorMap.mapView(FacebookButtonBarButton, FacebookButtonBarButtonMediator);
            mediatorMap.mapView(MqttButtonBarButton, MqttButtonBarButtonMediator);
            mediatorMap.mapView(GreenRoomButtonBarButton, GreenRoomButtonBarButtonMediator);
            mediatorMap.mapView(ChatList, ChatListMediator);
            mediatorMap.mapView(UserPopupMenuChatList, ChatListMediator, ChatList);
            injector.mapSingleton(SelectSocialButtonBarButton);
            mediatorMap.mapView(TinychatUsersList, TinychatUsersListMediator);
            mediatorMap.mapView(GreenRoomUsersList, GreenRoomUsersListMediator);
            mediatorMap.mapView(FacebookUsersList, FacebookUsersListMediator);
            mediatorMap.mapView(MqttUsersList, MqttUsersListMediator);
            mediatorMap.mapView(InviteSelectionScreen, InviteSelectionScreenMediator);
            mediatorMap.mapView(InviteMessageInput, InviteMessageInputMediator);
            mediatorMap.mapView(FacebookInviteFriendScreen, FacebookInviteFriendScreenMediator);
            mediatorMap.mapView(FacebookInviteFriendsScreen, FacebookInviteFriendsScreenMediator);
            mediatorMap.mapView(BroadcastAuthorizationScreen, BroadcastAuthorizationScreenMediator);
            mediatorMap.mapView(BroadcastAuthorizationWorkaroundScreen, BroadcastAuthorizationWorkaroundScreenMediator);
            mediatorMap.mapView(BroadcastPasswordPrompt, BroadcastPasswordPromptMediator);
            injector.mapSingleton(BroadcastContainerFactory);
            mediatorMap.mapView(CameraSelectionScreen, CameraSelectionScreenMediator);
            mediatorMap.mapView(MicrophoneSelectionScreen, MicrophoneSelectionScreenMediator);
            mediatorMap.mapView(CameraSelector, CameraSelectorMediator);
            mediatorMap.mapView(MicrophoneSelector, MicrophoneSelectorMediator);
            mediatorMap.mapView(BroadcastButton, BroadcastButtonMediator);
            mediatorMap.mapView(InviteButton, InviteButtonMediator);
            mediatorMap.mapView(CameraOptionsButton, CameraOptionsButtonMediator);
            mediatorMap.mapView(MicrophoneOptionsButton, MicrophoneOptionsButtonMediator);
            mediatorMap.mapView(SettingsButton, SettingsButtonMediator);
            mediatorMap.mapView(MicrophoneModeButton, MicrophoneModeButtonMediator);
            mediatorMap.mapView(SnapshotButton, SnapshotButtonMediator);
            mediatorMap.mapView(LayoutChangeButton, LayoutChangeButtonMediator);
            mediatorMap.mapView(OpenGraphToggle, OpenGraphToggleMediator);
            mediatorMap.mapView(OpenGraphPostedScreen, OpenGraphPostedScreenMediator);
            mediatorMap.mapView(OpenGraphToggleInfoScreen, OpenGraphToggleInfoScreenMediator);
            mediatorMap.mapView(IosPromoButton, IosPromoButtonMediator);
            mediatorMap.mapView(AndroidPromoButton, AndroidPromoButtonMediator);
            mediatorMap.mapView(RoomBroadcastCanvas, RoomBroadcastCanvasMediator);
            mediatorMap.mapView(GreenRoomCameraBroadcastContainer, GreenRoomCameraBroadcastContainerMediator);
            mediatorMap.mapView(SnapshotLoadingScreen, SnapshotLoadingScreenMediator);
            mediatorMap.mapView(SnapshotShareSelectionScreen, SnapshotShareSelectionScreenMediator);
            mediatorMap.mapView(SnapshotFacebookShareScreen, SnapshotFacebookShareScreenMediator);
            mediatorMap.mapView(DocumentButton, DocumentButtonMediator);
            mediatorMap.mapView(YouTubeButton, YouTubeButtonMediator);
            mediatorMap.mapView(YouTubeClipSelectionScreen, YouTubeClipSelectionScreenMediator);
            mediatorMap.mapView(TinychatUserinfoScreen, TinychatUserinfoScreenMediator);
            mediatorMap.mapView(FollowButton, FollowButtonMediator);
            mediatorMap.mapView(TinychatGiftScreen, TinychatGiftScreenMediator);
            mediatorMap.mapView(RoomDomainBlockScreen, RoomDomainBlockScreenMediator);
            mediatorMap.mapView(TrialButton, TrialButtonMediator);
            mediatorMap.mapView(UpgradeButton, UpgradeButtonMediator);
            mediatorMap.mapView(TrialButtonBar, TrialButtonBarMediator);
            mediatorMap.mapView(TrialOverlay, TrialOverlayMediator);
            mediatorMap.mapView(TrialPopup, TrialPopupMediator);
            mediatorMap.mapView(TrialResizePopup, TrialResizePopupMediator);
            mediatorMap.mapView(EnterFullScreenButton, EnterFullScreenButtonMediator);
            mediatorMap.mapView(ExitFullScreenButton, ExitFullScreenButtonMediator);
            mediatorMap.mapView(AdvancedTitleWindow, AdvancedTitleWindowMediator);
            mediatorMap.mapView(ProIndicator, ProIndicatorMediator);
            injector.mapValue(ChatColors, new ChatColors(StandardChatColors.COLORS));
            injector.mapSingletonOf(PopupMenuContextFactory, TinychatPopupMenuContextFactory);
            injector.mapSingleton(DefaultRoomGuard);
            injector.mapSingleton(IsOperatorGuard);
            injector.mapSingleton(IsntOperatorGuard);
            injector.mapSingleton(IsRoomOwnerGuard);
            injector.mapSingleton(IsFacebookRoomGuard);
            injector.mapSingleton(IsPaidUserGuard);
            injector.mapSingleton(RoomHasBroadcastersGuard);
            injector.mapSingleton(SubjectToTrialGuard);
            injector.mapSingleton(IsBroadcastingGuard);
            injector.mapSingleton(IsBroadcastingVideoGuard);
            injector.mapSingleton(IsMediaModeratorGuard);
            injector.mapSingleton(IsNextModeGuard);
            injector.mapSingleton(IsntNextModeGuard);
            injector.mapSingleton(ForcedPush2TalkGuard);
            injector.mapSingleton(BroadcastSlotAvailableGuard);
            injector.mapSingleton(IsntCameraOnlyMode);
            injector.mapSingleton(NickIsPredeterminedGuard);
            injector.mapSingleton(IsTinychatUserGuard);
            injector.mapSingleton(ExistsYouTubeBroadcastGuard);
            injector.mapSingleton(HasSelectedMicrophone);
            injector.mapSingleton(ReceiveTinychatPrivateMessagesGuard);
            injector.mapSingleton(GreenRoomEnabledGuard);
            injector.mapSingleton(GreenRoomEligibleGuard);
            injector.mapSingleton(ConnectedToGreenRoomGuard);
            injector.mapSingleton(StartupComplete);
            signalCommandMap.mapSignalClass(TriggerModeStartupSequence, TriggerModeStartupSequenceCommand);
            signalCommandMap.mapSignalClass(ConnectToRoom, ConnectToRoomSequenceCommand);
            signalCommandMap.mapSignalClass(DisconnectFromRoom, DisconnectFromRoomCommand);
            signalCommandMap.mapSignalClass(ParseUserInput, ParseUserInputCommand);
            signalCommandMap.mapSignalClass(PostChatMessage, PostChatMessageCommand);
            signalCommandMap.mapSignalClass(PostGlobalNotice, PostChatMessageCommand);
            signalCommandMap.mapSignalClass(OpenLink, OpenLinkCommand);
            injector.mapSingleton(PostActionNotice);
            injector.mapSingleton(PostMediaNotice);
            signalCommandMap.mapSignalClass(LoginRequest, LoginRequestCommand);
            signalCommandMap.mapSignalClass(LoginSuccess, LoginSuccessCommand);
            signalCommandMap.mapSignalClass(LoginSuccess, YouTubeAutoPlayCommand, true);
            injector.mapSingleton(LoginFailure);
            signalCommandMap.mapSignalClass(PostFacebookInviteStatus, PostFacebookInviteStatusCommand);
            signalCommandMap.mapSignalClass(SendFacebookInviteFriends, SendFacebookInviteFriendsCommand);
            signalCommandMap.mapSignalClass(PromptFacebookInviteStatus, PromptFacebookInviteStatusCommand);
            signalCommandMap.mapSignalClass(DirectShareSnapshot, DirectShareSnapshotCommand);
            signalCommandMap.mapSignalClass(PromptShareSnapshot, PromptShareSnapshotCommand);
            signalCommandMap.mapSignalClass(TumblrReblog, TumblrReblogCommand);
            signalCommandMap.mapSignalClass(TwitterPostTweet, TwitterPostTweetCommand);
            signalCommandMap.mapSignalClass(TwitterFollow, TwitterFollowCommand);
            signalCommandMap.mapSignalClass(StartBroadcastingRequest, StartRoomBroadcastSequenceCommand);
            signalCommandMap.mapSignalClass(StopBroadcastingRequest, StopBroadcastingRequestCommand);
            signalCommandMap.mapSignalClass(ClearBroadcastPassword, ClearBroadcastPasswordCommand);
            signalCommandMap.mapSignalClass(TwitterWebIntentTweetInvite, TwitterWebIntentTweetInviteCommand);
            signalCommandMap.mapSignalClass(ConfirmBan, ConfirmBanUserCommand);
            signalCommandMap.mapSignalClass(ConfirmReportUser, ConfirmReportUserCommand);
            signalCommandMap.mapSignalClass(MuteRoom, MuteRoomCommand);
            signalCommandMap.mapSignalClass(ForceRoomPush2Talk, ForceRoomPush2TalkCommand);
            signalCommandMap.mapSignalClass(CloseBroadcast, CloseBroadcastCommand);
            var _loc_1:* = injector.getInstance(RoomConnection);
            signalCommandMap.mapSignal(_loc_1.banned, BannedCommand);
            signalCommandMap.mapSignal(_loc_1.kick, KickCommand);
            signalCommandMap.mapSignalClass(CallRoom, CallRoomCommand);
            var _loc_2:* = injector.getInstance(ApplicationConnections);
            signalCommandMap.mapSignal(_loc_2.connectionLost, ConnectionLostCommand);
            signalCommandMap.mapSignal(_loc_2.connectionAttemptFailed, ConnectionFailedCommand);
            var _loc_3:* = injector.getInstance(RoomUsers);
            signalCommandMap.mapSignal(_loc_3.added, NotifyNewUserMediaBroadcastCommand);
            var _loc_4:* = injector.getInstance(PrivateMessageParser);
            signalCommandMap.mapSignal(_loc_4.allowBroadcast, BroadcastAllowedCommand);
            var _loc_5:* = injector.getInstance(FromOwnerParser);
            signalCommandMap.mapSignal(_loc_5.close, BroadcastClosedCommand);
            signalCommandMap.mapGuardedSignal(_loc_5.mute, RoomMutedCommand, IsntOperatorGuard);
            signalCommandMap.mapSignal(_loc_5.notice, FromOwnerNoticeCommand);
            signalCommandMap.mapGuardedSignal(_loc_5.push2talk, RoomPush2TalkForcedCommand, IsntOperatorGuard);
            signalCommandMap.mapSignalClass(InvokeColorAction, ColorActionCommand);
            signalCommandMap.mapSignalClass(InvokeHelpAction, HelpActionCommand);
            signalCommandMap.mapSignalClass(InvokeVersionAction, VersionActionCommand);
            signalCommandMap.mapSignalClass(InvokeUserAction, DispatchSignalCommand);
            signalCommandMap.mapSignalClass(BanUser, BanUserCommand);
            signalCommandMap.mapSignalClass(ForgiveUser, ForgiveBanSequenceCommand);
            signalCommandMap.mapSignalClass(HideBroadcast, HideBroadcastCommand);
            signalCommandMap.mapSignalClass(ResizeBroadcast, ResizeBroadcastCommand);
            signalCommandMap.mapSignalClass(IgnoreUser, IgnoreUserCommand);
            signalCommandMap.mapSignalClass(InviteUser, InviteUserCommand);
            signalCommandMap.mapSignalClass(PrivateChatWithUser, PrivateChatWithUserCommand);
            signalCommandMap.mapSignalClass(ReportUser, ReportUserCommand);
            signalCommandMap.mapSignalClass(ShowBroadcast, ShowBroadcastCommand);
            signalCommandMap.mapSignalClass(PromoteUser, PromoteUserCommand);
            signalCommandMap.mapSignalClass(MqttBlockUser, MqttBlockUserCommand);
            signalCommandMap.mapSignalClass(MenuOptionSelected, MenuOptionSelectedCommand);
            signalCommandMap.mapSignalClass(OpenDocument, OpenDocumentCommand);
            signalCommandMap.mapSignalClass(RequestUserinfo, UserinfoRequestSatisfiedCommand);
            signalCommandMap.mapSignalClass(DisplayUserinfo, DisplayUserinfoCommand);
            signalCommandMap.mapSignalClass(FollowMember, FollowUserCommand);
            var _loc_6:* = injector.getInstance(GiftCommunicator);
            signalCommandMap.mapSignalClass(RequestGift, RequestGiftCommand);
            signalCommandMap.mapSignal(_loc_6.giftRequestSatisfied, GiftRequestSatisfiedCommand);
            signalCommandMap.mapSignalClass(DisplaySendGift, DisplaySendGiftCommand);
            signalCommandMap.mapSignalClass(AllowBroadcast, AllowBroadcastCommand);
            signalCommandMap.mapSignalClass(StartTrialMode, StartTrialModeCommand);
            signalCommandMap.mapSignalClass(EndTrialMode, EndTrialModeCommand);
            signalCommandMap.mapSignalClass(OpenUpgradeUrl, OpenUpgradeUrlCommand);
            signalCommandMap.mapSignalClass(EnterFullScreen, EnterFullScreenCommand);
            signalCommandMap.mapSignalClass(ExitFullScreen, ExitFullScreenCommand);
            signalCommandMap.mapSignalClass(DispatchSignal, DispatchSignalCommand);
            signalCommandMap.mapSignalClass(MqttFollow, MqttFollowCommand);
            signalCommandMap.mapSignalClass(MqttUnfollow, MqttUnfollowCommand);
            mediatorMap.mapView(PupilPreloader, PreloaderMediator);
            mediatorMap.createMediator(PupilPreloader.instance);
            return;
        }// end function

    }
}
